// Code generated by protoc-gen-go.
// source: rpc.proto
// DO NOT EDIT!

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type RpcMsgType int32

const (
	RpcMsgType_Heart    RpcMsgType = 1
	RpcMsgType_Request  RpcMsgType = 2
	RpcMsgType_Response RpcMsgType = 3
	RpcMsgType_Router   RpcMsgType = 4
)

var RpcMsgType_name = map[int32]string{
	1: "Heart",
	2: "Request",
	3: "Response",
	4: "Router",
}
var RpcMsgType_value = map[string]int32{
	"Heart":    1,
	"Request":  2,
	"Response": 3,
	"Router":   4,
}

func (x RpcMsgType) Enum() *RpcMsgType {
	p := new(RpcMsgType)
	*p = x
	return p
}
func (x RpcMsgType) String() string {
	return proto.EnumName(RpcMsgType_name, int32(x))
}
func (x *RpcMsgType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(RpcMsgType_value, data, "RpcMsgType")
	if err != nil {
		return err
	}
	*x = RpcMsgType(value)
	return nil
}
func (RpcMsgType) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

type RpcRequest struct {
	Rid              *uint32 `protobuf:"varint,1,opt,name=rid" json:"rid,omitempty"`
	Method           *string `protobuf:"bytes,2,opt,name=method" json:"method,omitempty"`
	Data             []byte  `protobuf:"bytes,3,opt,name=data" json:"data,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *RpcRequest) Reset()                    { *m = RpcRequest{} }
func (m *RpcRequest) String() string            { return proto.CompactTextString(m) }
func (*RpcRequest) ProtoMessage()               {}
func (*RpcRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *RpcRequest) GetRid() uint32 {
	if m != nil && m.Rid != nil {
		return *m.Rid
	}
	return 0
}

func (m *RpcRequest) GetMethod() string {
	if m != nil && m.Method != nil {
		return *m.Method
	}
	return ""
}

func (m *RpcRequest) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type RpcResponse struct {
	Rid              *uint32 `protobuf:"varint,1,opt,name=rid" json:"rid,omitempty"`
	Err              *string `protobuf:"bytes,2,opt,name=err" json:"err,omitempty"`
	Data             []byte  `protobuf:"bytes,3,opt,name=data" json:"data,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *RpcResponse) Reset()                    { *m = RpcResponse{} }
func (m *RpcResponse) String() string            { return proto.CompactTextString(m) }
func (*RpcResponse) ProtoMessage()               {}
func (*RpcResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *RpcResponse) GetRid() uint32 {
	if m != nil && m.Rid != nil {
		return *m.Rid
	}
	return 0
}

func (m *RpcResponse) GetErr() string {
	if m != nil && m.Err != nil {
		return *m.Err
	}
	return ""
}

func (m *RpcResponse) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type RpcHeart struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *RpcHeart) Reset()                    { *m = RpcHeart{} }
func (m *RpcHeart) String() string            { return proto.CompactTextString(m) }
func (*RpcHeart) ProtoMessage()               {}
func (*RpcHeart) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

type RpcRouterItem struct {
	Method           *string `protobuf:"bytes,1,opt,name=method" json:"method,omitempty"`
	ReqMsgId         *uint32 `protobuf:"varint,2,opt,name=reqMsgId" json:"reqMsgId,omitempty"`
	ReplyMsgId       *uint32 `protobuf:"varint,3,opt,name=replyMsgId" json:"replyMsgId,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *RpcRouterItem) Reset()                    { *m = RpcRouterItem{} }
func (m *RpcRouterItem) String() string            { return proto.CompactTextString(m) }
func (*RpcRouterItem) ProtoMessage()               {}
func (*RpcRouterItem) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *RpcRouterItem) GetMethod() string {
	if m != nil && m.Method != nil {
		return *m.Method
	}
	return ""
}

func (m *RpcRouterItem) GetReqMsgId() uint32 {
	if m != nil && m.ReqMsgId != nil {
		return *m.ReqMsgId
	}
	return 0
}

func (m *RpcRouterItem) GetReplyMsgId() uint32 {
	if m != nil && m.ReplyMsgId != nil {
		return *m.ReplyMsgId
	}
	return 0
}

type RpcRouter struct {
	Items            []*RpcRouterItem `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
	XXX_unrecognized []byte           `json:"-"`
}

func (m *RpcRouter) Reset()                    { *m = RpcRouter{} }
func (m *RpcRouter) String() string            { return proto.CompactTextString(m) }
func (*RpcRouter) ProtoMessage()               {}
func (*RpcRouter) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func (m *RpcRouter) GetItems() []*RpcRouterItem {
	if m != nil {
		return m.Items
	}
	return nil
}

func init() {
	proto.RegisterType((*RpcRequest)(nil), "pb.RpcRequest")
	proto.RegisterType((*RpcResponse)(nil), "pb.RpcResponse")
	proto.RegisterType((*RpcHeart)(nil), "pb.RpcHeart")
	proto.RegisterType((*RpcRouterItem)(nil), "pb.RpcRouterItem")
	proto.RegisterType((*RpcRouter)(nil), "pb.RpcRouter")
	proto.RegisterEnum("pb.RpcMsgType", RpcMsgType_name, RpcMsgType_value)
}

func init() { proto.RegisterFile("rpc.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 238 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x6c, 0x90, 0xbf, 0x4b, 0xc3, 0x50,
	0x14, 0x85, 0xc9, 0x8f, 0xd6, 0xe4, 0xa4, 0x91, 0xe7, 0x9b, 0x32, 0x96, 0x4c, 0x45, 0x30, 0x83,
	0x20, 0x6e, 0x0e, 0x82, 0x60, 0x07, 0x97, 0xe2, 0xe4, 0x96, 0x36, 0x17, 0x2d, 0x58, 0xdf, 0xed,
	0x7d, 0xaf, 0x43, 0xff, 0x7b, 0x6f, 0x13, 0x15, 0x03, 0x1d, 0xcf, 0x83, 0xef, 0x3b, 0xe7, 0x5d,
	0xe4, 0xc2, 0x9b, 0x86, 0xc5, 0x05, 0x67, 0x63, 0x5e, 0xd7, 0xf7, 0xc0, 0x8a, 0x37, 0x2b, 0xda,
	0x1f, 0xc8, 0x07, 0x5b, 0x20, 0x91, 0x6d, 0x57, 0x45, 0xf3, 0x68, 0x51, 0xda, 0x4b, 0x4c, 0x77,
	0x14, 0x3e, 0x5c, 0x57, 0xc5, 0x9a, 0x73, 0x3b, 0x43, 0xda, 0xb5, 0xa1, 0xad, 0x12, 0x4d, 0xb3,
	0xfa, 0x0e, 0x45, 0x0f, 0x7a, 0x76, 0x5f, 0x9e, 0xc6, 0xa4, 0x06, 0x12, 0x39, 0x8b, 0x01, 0x99,
	0x62, 0xcf, 0xd4, 0x4a, 0xa8, 0x9f, 0x50, 0x9e, 0x14, 0xee, 0x10, 0x48, 0x96, 0x81, 0x76, 0xff,
	0x1a, 0xa3, 0x1e, 0x35, 0xc8, 0x84, 0xf6, 0x2f, 0xfe, 0x7d, 0x39, 0x6c, 0x28, 0xad, 0x05, 0x84,
	0xf8, 0xf3, 0x38, 0xbc, 0x9d, 0x94, 0x65, 0x7d, 0x83, 0xfc, 0x4f, 0x63, 0xe7, 0x98, 0x6c, 0x55,
	0xe5, 0xd5, 0x90, 0x2c, 0x8a, 0xdb, 0xab, 0x86, 0xd7, 0xcd, 0xa8, 0xe4, 0xfa, 0xa1, 0xff, 0xb1,
	0x0a, 0x5e, 0x8f, 0x4c, 0x36, 0xc7, 0xa4, 0x1f, 0x63, 0x22, 0x5d, 0x7d, 0xf1, 0x73, 0x07, 0x13,
	0xeb, 0xea, 0xec, 0xf7, 0x6f, 0x26, 0xd1, 0xd6, 0xe9, 0x60, 0x30, 0xe9, 0x63, 0xfa, 0xa6, 0x77,
	0xfb, 0x0e, 0x00, 0x00, 0xff, 0xff, 0xa7, 0xbb, 0x38, 0xbd, 0x47, 0x01, 0x00, 0x00,
}
