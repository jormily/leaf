// Code generated by protoc-gen-go.
// source: rpc.proto
// DO NOT EDIT!

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type RpcMsgType int32

const (
	RpcMsgType_Nil      RpcMsgType = 1
	RpcMsgType_Heart    RpcMsgType = 2
	RpcMsgType_Handlers RpcMsgType = 3
)

var RpcMsgType_name = map[int32]string{
	1: "Nil",
	2: "Heart",
	3: "Handlers",
}
var RpcMsgType_value = map[string]int32{
	"Nil":      1,
	"Heart":    2,
	"Handlers": 3,
}

func (x RpcMsgType) Enum() *RpcMsgType {
	p := new(RpcMsgType)
	*p = x
	return p
}
func (x RpcMsgType) String() string {
	return proto.EnumName(RpcMsgType_name, int32(x))
}
func (x *RpcMsgType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(RpcMsgType_value, data, "RpcMsgType")
	if err != nil {
		return err
	}
	*x = RpcMsgType(value)
	return nil
}
func (RpcMsgType) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

type RpcHeart struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *RpcHeart) Reset()                    { *m = RpcHeart{} }
func (m *RpcHeart) String() string            { return proto.CompactTextString(m) }
func (*RpcHeart) ProtoMessage()               {}
func (*RpcHeart) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

type RpcNil struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *RpcNil) Reset()                    { *m = RpcNil{} }
func (m *RpcNil) String() string            { return proto.CompactTextString(m) }
func (*RpcNil) ProtoMessage()               {}
func (*RpcNil) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

type RpcHandlers struct {
	Handlers         []*RpcHandler `protobuf:"bytes,1,rep,name=handlers" json:"handlers,omitempty"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *RpcHandlers) Reset()                    { *m = RpcHandlers{} }
func (m *RpcHandlers) String() string            { return proto.CompactTextString(m) }
func (*RpcHandlers) ProtoMessage()               {}
func (*RpcHandlers) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *RpcHandlers) GetHandlers() []*RpcHandler {
	if m != nil {
		return m.Handlers
	}
	return nil
}

type RpcHandler struct {
	Method           *string `protobuf:"bytes,1,opt,name=method" json:"method,omitempty"`
	RequestId        *uint32 `protobuf:"varint,2,opt,name=requestId" json:"requestId,omitempty"`
	ReplyId          *uint32 `protobuf:"varint,3,opt,name=replyId" json:"replyId,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *RpcHandler) Reset()                    { *m = RpcHandler{} }
func (m *RpcHandler) String() string            { return proto.CompactTextString(m) }
func (*RpcHandler) ProtoMessage()               {}
func (*RpcHandler) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *RpcHandler) GetMethod() string {
	if m != nil && m.Method != nil {
		return *m.Method
	}
	return ""
}

func (m *RpcHandler) GetRequestId() uint32 {
	if m != nil && m.RequestId != nil {
		return *m.RequestId
	}
	return 0
}

func (m *RpcHandler) GetReplyId() uint32 {
	if m != nil && m.ReplyId != nil {
		return *m.ReplyId
	}
	return 0
}

func init() {
	proto.RegisterType((*RpcHeart)(nil), "pb.RpcHeart")
	proto.RegisterType((*RpcNil)(nil), "pb.RpcNil")
	proto.RegisterType((*RpcHandlers)(nil), "pb.RpcHandlers")
	proto.RegisterType((*RpcHandler)(nil), "pb.RpcHandler")
	proto.RegisterEnum("pb.RpcMsgType", RpcMsgType_name, RpcMsgType_value)
}

func init() { proto.RegisterFile("rpc.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 186 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x44, 0x8e, 0xbd, 0xae, 0x82, 0x40,
	0x10, 0x85, 0x03, 0x7b, 0x2f, 0x2c, 0x83, 0x22, 0x4e, 0x45, 0x49, 0xb6, 0x22, 0x16, 0x6b, 0xe2,
	0x13, 0x18, 0x2b, 0x2d, 0xb4, 0x30, 0x56, 0x76, 0xfc, 0x6c, 0xc4, 0x04, 0x65, 0x5d, 0xd6, 0x82,
	0xb7, 0x77, 0x20, 0x1a, 0xba, 0x33, 0x5f, 0x4e, 0xe6, 0x7c, 0x10, 0x18, 0x5d, 0x4a, 0x6d, 0x5a,
	0xdb, 0xa2, 0xab, 0x0b, 0x01, 0xc0, 0xcf, 0xba, 0xdc, 0xab, 0xdc, 0x58, 0xc1, 0xc1, 0xa3, 0x7c,
	0xba, 0x37, 0x62, 0x0d, 0xe1, 0x40, 0xf3, 0x67, 0xd5, 0x28, 0xd3, 0x61, 0x0a, 0xbc, 0xfe, 0xe6,
	0xc4, 0x49, 0x59, 0x16, 0x6e, 0x22, 0xa9, 0x0b, 0x39, 0x55, 0xc4, 0x16, 0x60, 0xba, 0x30, 0x02,
	0xef, 0xa1, 0x6c, 0xdd, 0x56, 0xd4, 0x76, 0xb2, 0x00, 0x97, 0xb4, 0xaa, 0x5e, 0x6f, 0xd5, 0xd9,
	0x43, 0x95, 0xb8, 0x84, 0xe6, 0xb8, 0x00, 0xdf, 0x28, 0xdd, 0xf4, 0x04, 0xd8, 0x00, 0x56, 0x72,
	0xfc, 0x70, 0xec, 0x6e, 0x97, 0x5e, 0x2b, 0xf4, 0x81, 0x91, 0x47, 0xec, 0x60, 0x00, 0xff, 0xa3,
	0x5c, 0xec, 0xe2, 0x0c, 0xf8, 0xcf, 0x28, 0x66, 0xbb, 0xbf, 0x2b, 0xe9, 0x7f, 0x02, 0x00, 0x00,
	0xff, 0xff, 0xe8, 0xc7, 0xb0, 0xa0, 0xce, 0x00, 0x00, 0x00,
}
